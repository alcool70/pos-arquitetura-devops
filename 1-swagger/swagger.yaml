swagger: '2.0'
info:
  description: 'Job&Gym API v1.0. You can find out more about Job&Gym at [https://jobandgym.com](https://jobandgym.com). For this sample, you can use the api key `special-key` to test the authorization filters.'
  version: '1.0.0'
  title: 'Job&Gym API'
  termsOfService: 'http://jobandgym.com/terms/'
  contact:
    email: 'apiteam@jobandgym.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'jobandgym.com'
basePath: '/api/v1'
tags:
  - name: 'clientes'
    description: 'Everything about clients'
    externalDocs:
      description: 'Find out more'
      url: 'http://jobandgym.com'
  - name: 'profissional'
    description: 'Profissionais'
  - name: 'admin'
    description: 'OperaÃ§Ãµes administrativas'
    externalDocs:
      description: 'Find out more about our store'
      url: 'http://jobandgym.com'
schemes:
  - 'https'
paths:
  /clientes:
    post:
      tags:
        - 'clientes'
      summary: 'Add a new client to the platform'
      description: ''
      operationId: 'addClient'
      consumes:
        - 'application/json'
        - 'application/xml'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Client object that needs to be added to the platform'
          required: true
          schema:
            $ref: '#/definitions/Client'
      responses:
        '201':
          description: 'created'
        '401':
          description: 'unauthorized'
        '403':
          description: 'forbidden'
        '405':
          description: 'Invalid input'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
    put:
      tags:
        - 'clientes'
      summary: 'Update an existing Client'
      description: ''
      operationId: 'updateClient'
      consumes:
        - 'application/json'
        - 'application/xml'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Client object that needs to be added to the platform'
          required: true
          schema:
            $ref: '#/definitions/Client'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Client not found'
        '405':
          description: 'Validation exception'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
  /clientes/findByStatus:
    get:
      tags:
        - 'clientes'
      summary: 'Finds Clients by status'
      description: 'Multiple status values can be provided with comma separated strings'
      operationId: 'findClientsByStatus'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'status'
          in: 'query'
          description: 'Status values that need to be considered for filter'
          required: true
          type: 'array'
          maximum: 1
          items:
            type: 'string'
            enum:
              - 'prospected'
              - 'pending-docs'
              - 'pending-payment'
              - 'blocked'
              - 'active'
              - 'inactive'
            maximum: 1
            default: 'active'
          collectionFormat: 'multi'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Client'
        '400':
          description: 'Invalid status value'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
  /clientes/findByTags:
    get:
      tags:
        - 'clientes'
      summary: 'Finds Clients by tags'
      description: 'Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.'
      operationId: 'findClientsByTags'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'tags'
          in: 'query'
          description: 'Tags to filter by'
          required: true
          type: 'array'
          pattern: '/^[a-z]*$/i'
          items:
            type: 'string'
          collectionFormat: 'multi'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Client'
        '400':
          description: 'Invalid tag value'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
      deprecated: true
  /clientes/{clienteId}:
    get:
      tags:
        - 'clientes'
      summary: 'Find Client by ID'
      description: 'Returns a single Client'
      operationId: 'getClientById'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'clienteId'
          in: 'path'
          description: 'ID of Client to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Client'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Client not found'
      security:
        - api_key: []
    post:
      tags:
        - 'clientes'
      summary: 'Updates a client in the store with form data'
      description: ''
      operationId: 'updateClientWithForm'
      consumes:
        - 'application/x-www-form-urlencoded'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'clienteId'
          in: 'path'
          description: 'ID of client that needs to be updated'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'name'
          in: 'formData'
          description: 'Updated name of the client'
          required: false
          type: 'string'
        - name: 'status'
          in: 'formData'
          description: 'Updated status of the client'
          required: false
          type: 'string'
      responses:
        '201':
          description: 'created'
        '405':
          description: 'Invalid input'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
    delete:
      tags:
        - 'clientes'
      summary: 'Deletes a client'
      description: ''
      operationId: 'deleteClient'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'api_key'
          in: 'header'
          required: false
          type: 'string'
        - name: 'clienteId'
          in: 'path'
          description: 'Client id to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Client not found'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
  /clientes/{clienteId}/uploadImage:
    post:
      tags:
        - 'clientes'
      summary: 'uploads an image'
      description: ''
      operationId: 'uploadFile'
      consumes:
        - 'multipart/form-data'
      produces:
        - 'application/json'
      parameters:
        - name: 'clienteId'
          in: 'path'
          description: 'ID of client to update'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'additionalMetadata'
          in: 'formData'
          description: 'Additional data to pass to server'
          required: false
          type: 'string'
        - name: 'file'
          in: 'formData'
          description: 'file to upload'
          required: false
          type: 'file'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - clientstore_auth:
            - 'write:clients'
            - 'read:clients'
  /profissional/registro:
    get:
      tags:
        - 'profissional'
      summary: 'Update'
      description: 'Returns a map of status codes to quantities'
      operationId: 'getRegistro'
      produces:
        - 'application/json'
      parameters: []
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'object'
            additionalProperties:
              type: 'integer'
              format: 'int32'
      security:
        - api_key: []
  /profissional/status:
    post:
      tags:
        - 'profissional'
      summary: 'Place an status for a professional'
      description: ''
      operationId: 'placeStatus'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'status placed for purchasing the cliente'
          required: true
          schema:
            $ref: '#/definitions/Status'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Status'
        '400':
          description: 'Invalid Status'
  /profissional/status/{statusId}:
    get:
      tags:
        - 'profissional'
      summary: 'Find purchase status by ID'
      description: 'For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions'
      operationId: 'getStatusById'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'statusId'
          in: 'path'
          description: 'ID of cliente that needs to be fetched'
          required: true
          type: 'integer'
          maximum: 10.0
          minimum: 1.0
          format: 'int64'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Status'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Status not found'
    delete:
      tags:
        - 'profissional'
      summary: 'Delete purchase Status by ID'
      description: 'For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors'
      operationId: 'deleteStatus'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'statusId'
          in: 'path'
          description: 'ID of the status that needs to be deleted'
          required: true
          type: 'integer'
          minimum: 1.0
          format: 'int64'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Status not found'
  /admin:
    post:
      tags:
        - 'admin'
      summary: 'Create Admin'
      description: 'This can only be done by the logged in admin.'
      operationId: 'createAdmin'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created admin object'
          required: true
          schema:
            $ref: '#/definitions/admin'
      responses:
        default:
          description: 'successful operation'
  /admin/createWithArray:
    post:
      tags:
        - 'admin'
      summary: 'Creates list of admins with given input array'
      description: ''
      operationId: 'createAdminsWithArrayInput'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'List of admin object'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/admin'
      responses:
        default:
          description: 'successful operation'
  /admin/createWithList:
    post:
      tags:
        - 'admin'
      summary: 'Creates list of admins with given input array'
      description: ''
      operationId: 'createAdminsWithListInput'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'List of admin object'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/admin'
      responses:
        default:
          description: 'successful operation'
  /admin/login:
    get:
      tags:
        - 'admin'
      summary: 'Logs admin into the system'
      description: ''
      operationId: 'loginAdmin'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'query'
          description: 'The admin name for login'
          required: true
          type: 'string'
        - name: 'password'
          in: 'query'
          description: 'The password for login in clear text'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'string'
          headers:
            X-Rate-Limit:
              type: 'integer'
              format: 'int32'
              description: 'calls per hour allowed by the admin'
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        '400':
          description: 'Invalid username/password supplied'
  /admin/logout:
    post:
      tags:
        - 'admin'
      summary: 'Logs out current logged in admin session'
      description: ''
      operationId: 'logoutAdmin'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters: []
      responses:
        '205':
          description: 'logout operation successful'
        '400':
          description: 'bad request'
        '404':
          description: 'not found'
  /admin/{username}:
    get:
      tags:
        - 'admin'
      summary: 'Get admin by admin name'
      description: ''
      operationId: 'getAdminByName'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: 'string'
          pattern: '/^[a-z]{1}[0-9a-z]*$/i'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/admin'
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'admin not found'
    put:
      tags:
        - 'admin'
      summary: 'Updated admin'
      description: 'This can only be done by the logged in admin.'
      operationId: 'updateUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated admin object'
          required: true
          schema:
            $ref: '#/definitions/admin'
      responses:
        '400':
          description: 'Invalid admin supplied'
        '404':
          description: 'admin not found'
    delete:
      tags:
        - 'admin'
      summary: 'Delete admin'
      description: 'This can only be done by the logged in admin.'
      operationId: 'deleteuser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          type: 'string'
          pattern: '/^[a-z]{1}[0-9a-z]*$/i'
      responses:
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'admin not found'
security:
  - api_key: [read, write]
  - clientstore_auth: [read, write]
securityDefinitions:
  clientstore_auth:
    type: 'oauth2'
    authorizationUrl: 'http://jobgym.jobandgym.com/oauth/dialog'
    flow: 'implicit'
    scopes:
      write:clients: 'modify clients in your account'
      read:clients: 'read your clients'
  api_key:
    type: 'apiKey'
    name: 'api_key'
    in: 'header'
definitions:
  Status:
    type: 'string'
    enum:
      - test
  Category:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Category'
  admin:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
      userStatus:
        type: 'integer'
        format: 'int32'
        description: 'admin Status'
    xml:
      name: 'admin'
  Tag:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Tag'
  Client:
    type: 'object'
    required:
      - 'name'
      - 'photoUrls'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      category:
        $ref: '#/definitions/Category'
      name:
        type: 'string'
        example: 'cliente Job&Gym'
      photoUrls:
        type: 'array'
        xml:
          name: 'photoUrl'
          wrapped: true
        items:
          type: 'string'
      tags:
        type: 'array'
        xml:
          name: 'tag'
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: 'string'
        description: 'Client status in the platform'
        enum:
          - 'prospected'
          - 'pending-docs'
          - 'pending-payment'
          - 'blocked'
          - 'active'
          - 'inactive'
    xml:
      name: 'Client'
  ApiResponse:
    type: 'object'
    properties:
      code:
        type: 'integer'
        format: 'int32'
      type:
        type: 'string'
      message:
        type: 'string'
externalDocs:
  description: 'Find out more about Job&Gym'
  url: 'http://jobandgym.com'
